<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="fileList" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="deg" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1280, 800]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="grating_pattern_glare" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="PsychToolbox" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="debug" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="experiment_setup">
      <CodeComponent name="code_setup">
        <Param val="### START SET EXPERIMENT CONSTANTS ###&amp;#10;# (all sizes/coordinates are in degrees)&amp;#10;# diameter of grating stimulus&amp;#10;GRATING_DIAMETER = 10.5&amp;#10;# y coordinate of grating stimulus midpoint&amp;#10;GRATING_MIDPOINT_Y = 0&amp;#10;# diameter of grating center small circle&amp;#10;SMALL_CIRCLE_DIAMETER = 0.2/13.77 * GRATING_DIAMETER&amp;#10;# duration for which stimulus should be shown&amp;#10;SHOW_DUR = 5&amp;#10;&amp;#10;# mouse start position coordinates&amp;#10;# (eg '(0, 0)' means that the mouse cursor is&amp;#10;# moved to the center of the screen at beginning&amp;#10;# of every question routine&amp;#10;MOUSE_START_POS = (0, 0)&amp;#10;&amp;#10;&amp;#10;# text regular size&amp;#10;TXT_SIZE = 1.2&amp;#10;# text wrap width&amp;#10;TXT_WRAP_WIDTH = 30&amp;#10;# text neutral color&amp;#10;TXT_NEUTRAL_COL = [1, 1, 1]&amp;#10;&amp;#10;# confirmation button y coordinate&amp;#10;CONFIRM_Y = -10&amp;#10;&amp;#10;# confirmation button width&amp;#10;CONFIRM_BTN_WIDTH = 4&amp;#10;CONFIRM_BTN_HEIGHT = 2&amp;#10;# confirmation text height&amp;#10;CONFIRM_TXT_HEIGHT = CONFIRM_BTN_HEIGHT * 0.5&amp;#10;# confirmation text color&amp;#10;CONFIRM_TXT_COL = [-1, -1, -1]&amp;#10;# confirmation text box background/fill color&amp;#10;CONFIRM_BOX_FILL_COL = [1, 1, 1]&amp;#10;# confirmation text box border/line color&amp;#10;CONFIRM_BOX_BORDER_COL = [-1, -1, -1]&amp;#10;&amp;#10;# question y coordinate&amp;#10;Q_Y = 8&amp;#10;&amp;#10;# opacity of neutral/selected ('highlighted') response choices&amp;#10;RESP_NEUTRAL_OPACITY = 0.9&amp;#10;RESP_SELECTED_OPACITY = 1&amp;#10;&amp;#10;# side length of response choices' &quot;check&quot; boxes&amp;#10;RESP_BOX_SIDE_LEN = 1&amp;#10;&amp;#10;# color of neutral/selected response choices' &quot;check&quot; boxes&amp;#10;RESP_BOX_NEUTRAL_COL = [0, 0, 0]&amp;#10;RESP_BOX_SELECTED_COL = [1, 1, 1]&amp;#10;&amp;#10;## BEGIN INSTRUCTIONS SECTION ##&amp;#10;# instructions text size&amp;#10;INSTRUCTIONS_TXT_SIZE = TXT_SIZE*0.7&amp;#10;&amp;#10;# 1st text y coordinate&amp;#10;INSTRUCTIONS_TXT_Y1 = 8&amp;#10;&amp;#10;# 2nd text y coordinate&amp;#10;INSTRUCTIONS_TXT_Y2 = 3&amp;#10;&amp;#10;# 3rd text y coordinate&amp;#10;INSTRUCTIONS_TXT_Y3 = -1&amp;#10;&amp;#10;## END INSTRUCTIONS SECTION ##&amp;#10;&amp;#10;## BEGIN EXPERIENCE SECTION ##&amp;#10;# first response choice y coordinate&amp;#10;EXPERIENCE_RESP_Y = 5&amp;#10;# response choice font size&amp;#10;EXPERIENCE_RESP_TXT_SIZE = TXT_SIZE * 0.7&amp;#10;# y axis margin between response choices&amp;#10;EXPERIENCE_RESP_MARGIN = EXPERIENCE_RESP_TXT_SIZE * 2&amp;#10;&amp;#10;# x axis offset of response box from response text center&amp;#10;# (e. g. -6 means '6 degrees to the left of the middle of&amp;#10;# the response text')&amp;#10;EXPERIENCE_RESP_BOX_X_OFFSET = -15&amp;#10;&amp;#10;# 'other' response input box y coordinate&amp;#10;EXPERIENCE_INPUT_Y = -7.5&amp;#10;&amp;#10;## END EXPERIENCE SECTION ##&amp;#10;&amp;#10;## BEGIN COLOR SECTION ##&amp;#10;# first response choice y coordinate&amp;#10;COLOR_RESP_Y = 5&amp;#10;# response choice font size&amp;#10;COLOR_RESP_TXT_SIZE = TXT_SIZE * 0.8&amp;#10;# y axis margin between response choices&amp;#10;COLOR_RESP_MARGIN = COLOR_RESP_TXT_SIZE * 1.5&amp;#10;&amp;#10;# x axis offset of response box from response text center&amp;#10;# (e. g. -6 means '6 degrees to the left of the middle of&amp;#10;# the response text')&amp;#10;COLOR_RESP_BOX_X_OFFSET = -3&amp;#10;&amp;#10;## END COLOR SECTION ##&amp;#10;&amp;#10;## BEGIN DISCOMFORT SECTION ##&amp;#10;&amp;#10;&amp;#10;# width of participant response slider&amp;#10;SLIDER_WIDTH = 24&amp;#10;SLIDER_HEIGHT = 1.5&amp;#10;&amp;#10;# slider y coordinate&amp;#10;SLIDER_Y = -1&amp;#10;&amp;#10;## END DISCOMFORT SECTION ##&amp;#10;&amp;#10;## BEGIN DISCOMFORT SECTION ##&amp;#10;# question text y coordinate&amp;#10;Q_DISCOMFORT_Y = 5&amp;#10;&amp;#10;# width of participant response slider&amp;#10;SLIDER_WIDTH = 24&amp;#10;SLIDER_HEIGHT = 1.5&amp;#10;&amp;#10;# slider y coordinate&amp;#10;SLIDER_Y = -1&amp;#10;&amp;#10;## END DISCOMFORT SECTION ##&amp;#10;&amp;#10;&amp;#10;### END SET EXPERIMENT CONSTANTS ###" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="GRATING_DIAMETER = 13.77;&amp;#10;GRATING_MIDPOINT_Y = 0;&amp;#10;SMALL_CIRCLE_DIAMETER = ((0.2 / 13.77) * GRATING_DIAMETER);&amp;#10;SHOW_DUR = 5;&amp;#10;TXT_SIZE = 2;&amp;#10;SLIDER_WIDTH = 24;&amp;#10;SLIDER_HEIGHT = 1.5;&amp;#10;SLIDER_Y = (- 1);&amp;#10;CONFIRM_Y = (SLIDER_Y - (SLIDER_HEIGHT * 3));&amp;#10;CONFIRM_BTN_WIDTH = 2.5;&amp;#10;CONFIRM_BTN_HEIGHT = 1.2;&amp;#10;CONFIRM_TXT_HEIGHT = (CONFIRM_BTN_HEIGHT * 0.5);&amp;#10;CONFIRM_TXT = &quot;Bekr\u00e4fta&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_setup" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_translation">
        <Param val="### START TRANSLATION ###&amp;#10;# introduction text 1:&amp;#10;# &quot;In this test, you will be shown patterns for a&amp;#10;# few seconds each. Each pattern is followed by &amp;#10;# questions about it.&quot;&amp;#10;INSTRUCTIONS_TXT_1 = (&amp;#10;    &quot;In this test, you will be shown patterns for a &quot;&amp;#10;    &quot;few seconds each. Each pattern is followed by &quot;&amp;#10;    &quot;questions about it.&quot;&amp;#10;)&amp;#10;&amp;#10;&amp;#10;# introduction text 2:&amp;#10;# &quot;To respond to the questions, use the mouse&amp;#10;# to select all response choices that apply.&amp;#10;# When you're done, click 'confirm' to proceed.&amp;#10;# You might see a box for text input pop up.&amp;#10;# If you do, please use the keyboard to type&amp;#10;# your answer.&quot;&amp;#10;INSTRUCTIONS_TXT_2 = (&amp;#10;    &quot;To respond to the questions, use the mouse &quot;&amp;#10;    &quot;to select all response choices that apply. &quot;&amp;#10;    &quot;When you're done, click 'confirm' to proceed. &quot;&amp;#10;    &quot;You might see a box for text input pop up. &quot;&amp;#10;    &quot;If you do, please use the keyboard to type &quot;&amp;#10;    &quot;your answer.&quot;&amp;#10;)&amp;#10;&amp;#10;# introduction text 3:&amp;#10;# &quot;Click the button below to continue.&quot;&amp;#10;INSTRUCTIONS_TXT_3 = &quot;&quot;&quot;&amp;#10;Click the button below to continue.&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;&amp;#10;# &quot;Start test&quot;&amp;#10;INTRO_START_TXT = &quot;Start test&quot;&amp;#10;&amp;#10;# &quot;Which type(s) of experiences did you&amp;#10;# have while looking at the pattern?&quot;&amp;#10;Q_EXPERIENCES_TXT = &quot;&quot;&quot;&amp;#10;Which type(s) of experiences did you have while looking at the pattern?&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;&amp;#10;# dictionary of response options&amp;#10;# (&quot;colors, bending of lines, &amp;#10;# blurring of lines, shimmer/flicker, &amp;#10;# fading, shadowy shapes, &amp;#10;# other/specify&quot;)&amp;#10;Q_EXPERIENCES_DICT = {&amp;#10;    'colors': 'colors',&amp;#10;    'bend_lines': 'bending of lines',&amp;#10;    'blur_lines': 'blurring of lines',&amp;#10;    'flicker': 'shimmer/flicker',&amp;#10;    'fading': 'fading',&amp;#10;    'shadowy': 'shadowy shapes',&amp;#10;    'other': 'other/specify:'&amp;#10;}&amp;#10;&amp;#10;# 'Which, if any, color(s) did you experience while&amp;#10;# looking at the pattern?'&amp;#10;Q_COLOR_TXT = &quot;&quot;&quot;&amp;#10;Which color(s) did you experience while looking at the pattern?&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;# dictionary of response color names&amp;#10;Q_COLORS_DICT = {&amp;#10;    'yellow': 'yellow',&amp;#10;    'red': 'red',&amp;#10;    'green': 'green',&amp;#10;    'blue': 'blue',&amp;#10;    'purple': 'purple',&amp;#10;    'pink': 'pink',&amp;#10;    'brown': 'brown',&amp;#10;    'orange': 'orange'&amp;#10;}&amp;#10;&amp;#10;# &quot;How (un)comfortable did you find the&amp;#10;# pattern?&quot;&amp;#10;Q_DISCOMFORT_TXT = &quot;&quot;&quot;&amp;#10;How (un)comfortable did you find the pattern?&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;# 'Extremely uncomfortable'&amp;#10;DISCOMFORT_UNCOMFORT_TXT = 'Extremely uncomfortable'&amp;#10;# 'Extremely comfortable'&amp;#10;DISCOMFORT_COMFORT_TXT = 'Extremely comfortable'&amp;#10;&amp;#10;# confirmation button text&amp;#10;# 'Confirm'&amp;#10;CONFIRM_TXT = 'Confirm'&amp;#10;&amp;#10;# end text&amp;#10;# &quot;Thank you! Please wait until the researcher comes&amp;#10;# to help you.&quot;&amp;#10;END_TXT = &quot;Thank you! Please wait until the researcher comes to help you.&quot;&amp;#10;&amp;#10;### END TRANSLATION ###" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="Q_EXPERIENCES_TXT = &quot;\nVilken/vilka typ(er) av upplevelser fick du n\u00e4r du tittade p\u00e5 m\u00f6nstret?\n&quot;;&amp;#10;Q_DISCOMFORT_TXT = &quot;\nHur (o)behagligt upplevde du m\u00f6nstret?\n&quot;;&amp;#10;CONFIRM_TXT = &quot;Bekr\u00e4fta&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_translation" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="trial_show_pattern">
      <GratingComponent name="grating_trial">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="avg" valType="str" updates="constant" name="blendmode"/>
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1.0" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="circle" valType="str" updates="constant" name="mask"/>
        <Param val="grating_trial" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="0" valType="code" updates="set every repeat" name="phase"/>
        <Param val="(0, GRATING_MIDPOINT_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="0.27" valType="code" updates="set every repeat" name="sf"/>
        <Param val="(GRATING_DIAMETER, GRATING_DIAMETER)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$SHOW_DUR" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$np.array([[1], [-1]])" valType="str" updates="constant" name="tex"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </GratingComponent>
      <CodeComponent name="code_trial">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# form lists of stimuli specifications&amp;#10;# grating phase&amp;#10;grating_phases = [0.25, 0.25, 0.25]&amp;#10;# grating spatial frequency&amp;#10;grating_sfs = [0.4, 3, 12.4]&amp;#10;# grating textures (using different ones&amp;#10;# for achieving varying texture resolution, where&amp;#10;# lower-frequency patterns require higher res)&amp;#10;grating_textures = [&amp;#10;    np.array([[1], [-1]]).repeat(200, axis=0),&amp;#10;    np.array([[1], [-1]]).repeat(25, axis=0),&amp;#10;    np.array([[1], [-1]])&amp;#10;]&amp;#10;&amp;#10;# forming list of dictionaries where each dict holds&amp;#10;# specifications for a single pattern, to simplify&amp;#10;# order randomization and pattern updates&amp;#10;grating_specs = [&amp;#10;    {&amp;#10;        'phase': grating_phases[x],&amp;#10;        'sf': grating_sfs[x],&amp;#10;        'texture': grating_textures[x]&amp;#10;    }&amp;#10;    for x in range(len(grating_textures))&amp;#10;]&amp;#10;&amp;#10;# randomize order of grating phases/spatial frequencies&amp;#10;shuffle(grating_specs)&amp;#10;&amp;#10;# start trial counter, for stepping through stimuli&amp;#10;# specifications&amp;#10;trial_counter = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="spec_dict = grating_specs[trial_counter]&amp;#10;grating_trial.phase = spec_dict['phase']&amp;#10;grating_trial.sf = spec_dict['sf']&amp;#10;grating_trial.tex = spec_dict['texture']&amp;#10;&amp;#10;# hide the mouse cursor&amp;#10;win.mouseVisible = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="trials.addData('grating_spatial_frequency', grating_trial.sf)&amp;#10;trials.addData('grating_phase', grating_trial.phase)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_trial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="circle_trial_mid">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="120" valType="int" updates="constant" name="nVertices"/>
        <Param val="circle_trial_mid" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, GRATING_MIDPOINT_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="regular polygon..." valType="str" updates="constant" name="shape"/>
        <Param val="(SMALL_CIRCLE_DIAMETER, SMALL_CIRCLE_DIAMETER)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$SHOW_DUR" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="trial_q_discomfort">
      <CodeComponent name="code_discomfort">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# move the mouse cursor to the starting position&amp;#10;mouse_discomfort.setPos(MOUSE_START_POS)&amp;#10;&amp;#10;mouse_discomfort.status == STARTED&amp;#10;buttons = []&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="this_frame_buttons = mouse_discomfort.getPressed()&amp;#10;&amp;#10;# at least one button has been clicked, and it's a new click&amp;#10;if sum(this_frame_buttons) &gt; 0 and this_frame_buttons != prev_frame_buttons: &amp;#10;    # check if the mouse was inside our 'clickable' object&amp;#10;    if rectangle_discomfort_confirm.contains(mouse_discomfort) and slider_discomfort.getRating() is not None:&amp;#10;        continueRoutine = False&amp;#10;        gotValidClick = True&amp;#10;        confirm_click_time = tThisFlip&amp;#10;&amp;#10;# store this frame's buttons for comparison in next frame&amp;#10;prev_frame_buttons = this_frame_buttons" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="trials.addData('discomfort_confirm_click_time', confirm_click_time)&amp;#10;&amp;#10;trial_counter += 1&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_discomfort" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse_discomfort">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_discomfort" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <SliderComponent name="slider_discomfort">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="White" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Red" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="HelveticaBold" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="0" valType="code" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="(DISCOMFORT_UNCOMFORT_TXT,'','','','','','','','','', DISCOMFORT_COMFORT_TXT)" valType="list" updates="constant" name="labels"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider_discomfort" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, SLIDER_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(SLIDER_WIDTH, SLIDER_HEIGHT)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="[]" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="['rating']" valType="fixedList" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5)" valType="list" updates="constant" name="ticks"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <PolygonComponent name="rectangle_discomfort_confirm">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$CONFIRM_BOX_FILL_COL" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$CONFIRM_BOX_BORDER_COL" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="2" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="rectangle_discomfort_confirm" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CONFIRM_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(CONFIRM_BTN_WIDTH, CONFIRM_BTN_HEIGHT)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="text_discomfort_confirm">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="CONFIRM_TXT_HEIGHT" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_discomfort_confirm" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CONFIRM_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$CONFIRM_TXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_q_discomfort">
        <Param val="$TXT_NEUTRAL_COL" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="$TXT_SIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_q_discomfort" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, Q_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Q_DISCOMFORT_TXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="$TXT_WRAP_WIDTH" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="trial_q_color">
      <CodeComponent name="code_color">
        <Param val="# import necessary for forming ordered dictionary&amp;#10;# of color(key)-textstim(value) mappings&amp;#10;from collections import OrderedDict" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# order of response alternatives&amp;#10;color_order = [&amp;#10;    'yellow',&amp;#10;    'red',&amp;#10;    'green',&amp;#10;    'blue',&amp;#10;    'purple',&amp;#10;    'pink',&amp;#10;    'brown',&amp;#10;    'orange'&amp;#10;]&amp;#10;&amp;#10;# color(key)-textstim(value) dictionary&amp;#10;color_resp_dict = OrderedDict()&amp;#10;&amp;#10;# fill up the dictionary with appropriate mappings&amp;#10;for i, color in enumerate(color_order):&amp;#10;    resp_text_stim = visual.TextStim(&amp;#10;        win=win, &amp;#10;        name=f'color_{color}',&amp;#10;        text=Q_COLORS_DICT[color],&amp;#10;        font='Arial',&amp;#10;        units='deg', &amp;#10;        pos=(0, COLOR_RESP_Y - i * COLOR_RESP_MARGIN), &amp;#10;        height=COLOR_RESP_TXT_SIZE, &amp;#10;        wrapWidth=TXT_WRAP_WIDTH, &amp;#10;        ori=0, &amp;#10;        color=TXT_NEUTRAL_COL, &amp;#10;        colorSpace='rgb', &amp;#10;        opacity=RESP_NEUTRAL_OPACITY, &amp;#10;        languageStyle='LTR',&amp;#10;        depth=-5.0&amp;#10;    )&amp;#10;    resp_box_stim = visual.Rect(&amp;#10;        win=win, &amp;#10;        name='rectangle_color_confirm',&amp;#10;        units='deg', &amp;#10;        width=RESP_BOX_SIDE_LEN, &amp;#10;        height=RESP_BOX_SIDE_LEN,&amp;#10;        ori=0,&amp;#10;        pos=(COLOR_RESP_BOX_X_OFFSET, COLOR_RESP_Y - i * COLOR_RESP_MARGIN),&amp;#10;        lineWidth=1, &amp;#10;        lineColor=RESP_BOX_SELECTED_COL, &amp;#10;        lineColorSpace='rgb',&amp;#10;        fillColor=RESP_BOX_NEUTRAL_COL, &amp;#10;        fillColorSpace='rgb',&amp;#10;        opacity=1, &amp;#10;        depth=-2.0, &amp;#10;        interpolate=True&amp;#10;    )&amp;#10;    color_resp_dict[color] = (resp_box_stim, resp_text_stim)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# move the mouse cursor to the starting position&amp;#10;mouse_color.setPos(MOUSE_START_POS)&amp;#10;&amp;#10;mouse_color.status == STARTED&amp;#10;&amp;#10;# list of (in English) colors that have been&amp;#10;# selected by the participant&amp;#10;answer_colors = []&amp;#10;&amp;#10;# reset font and opacity of response color textstims,&amp;#10;# and response box colors&amp;#10;for resp_key in color_resp_dict:&amp;#10;    resp_box, resp_text = color_resp_dict[resp_key]&amp;#10;    resp_text.opacity = RESP_NEUTRAL_OPACITY&amp;#10;    resp_text.font = 'Arial'&amp;#10;    resp_box.fillColor = RESP_BOX_NEUTRAL_COL" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="this_frame_buttons = mouse_color.getPressed()&amp;#10;&amp;#10;# at least one button has been clicked, and it's a new click&amp;#10;if sum(this_frame_buttons) &gt; 0 and this_frame_buttons != prev_frame_buttons: &amp;#10;    # check if one of the response alternatives was clicked&amp;#10;    for resp_key in color_resp_dict:&amp;#10;        resp_box, resp_text = color_resp_dict[resp_key]&amp;#10;        if resp_text.contains(mouse_color) or resp_box.contains(mouse_color):&amp;#10;            # if response is already selected, deselect it&amp;#10;            if resp_key in answer_colors:&amp;#10;                resp_text.opacity = RESP_NEUTRAL_OPACITY&amp;#10;                resp_text.font = 'Arial'&amp;#10;                answer_colors.remove(resp_key)&amp;#10;                resp_box.fillColor = RESP_BOX_NEUTRAL_COL&amp;#10;            # if response isn't selected, select it&amp;#10;            else:&amp;#10;                # change the font to indicate that response&amp;#10;                # has been selected&amp;#10;                resp_text.opacity = RESP_SELECTED_OPACITY&amp;#10;                resp_text.font = 'Arial Black'&amp;#10;                answer_colors.append(resp_key)&amp;#10;                resp_box.fillColor = RESP_BOX_SELECTED_COL&amp;#10;    # check if 'confirm' button was clicked&amp;#10;    if rectangle_color_confirm.contains(mouse_color):&amp;#10;        continueRoutine = False&amp;#10;        gotValidClick = True&amp;#10;        confirm_click_time = tThisFlip&amp;#10;&amp;#10;# store this frame's buttons for comparison in next frame&amp;#10;prev_frame_buttons = this_frame_buttons&amp;#10;&amp;#10;# draw the response choices&amp;#10;for resp_key in color_resp_dict:&amp;#10;    for stim in color_resp_dict[resp_key]:&amp;#10;        stim.draw()&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="trials.addData('color_confirm_click_time', confirm_click_time)&amp;#10;trials.addData('experienced_colors', answer_colors)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_color" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse_color">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_color" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <PolygonComponent name="rectangle_color_confirm">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$CONFIRM_BOX_FILL_COL" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$CONFIRM_BOX_BORDER_COL" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="2" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="rectangle_color_confirm" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CONFIRM_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(CONFIRM_BTN_WIDTH, CONFIRM_BTN_HEIGHT)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="text_color_confirm">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="CONFIRM_TXT_HEIGHT" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_color_confirm" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CONFIRM_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$CONFIRM_TXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_q_color">
        <Param val="$TXT_NEUTRAL_COL" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="$TXT_SIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_q_color" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, Q_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Q_COLOR_TXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="$TXT_WRAP_WIDTH" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="trial_q_experience">
      <CodeComponent name="code_experience">
        <Param val="# import necessary for forming ordered dictionary&amp;#10;# of color(key)-textstim(value) mappings&amp;#10;from collections import OrderedDict&amp;#10;&amp;#10;# list of clicked buttons in current frame&amp;#10;this_frame_buttons = []&amp;#10;# list of buttons clicked on the last frame&amp;#10;prev_frame_buttons = []&amp;#10;&amp;#10;### BEGIN TEXT INPUT SETUP ###&amp;#10;# solution for registering held key presses directly using pyglet is based&amp;#10;# on this forum post: https://discourse.psychopy.org/t/tracking-key-release/1099&amp;#10;import pyglet&amp;#10;# create a list of allowed 'other' response&amp;#10;# input characters.&amp;#10;# a-z&amp;#10;allowed_input_chars = [chr(x) for x in range(97, 123)]&amp;#10;# 0-9&amp;#10;allowed_input_chars.extend([str(x) for x in range(10)])&amp;#10;&amp;#10;# Swedish character key typing is coded as&amp;#10;# 'semicolon' for ö, 'apostrophe' for&amp;#10;# ä, and 'bracketleft' for å&amp;#10;# - if using Windows computer (works with SUBIC outside scanner Windows computer)&amp;#10;allowed_input_chars.extend(['pound', 'apostrophe', 'bracketright'])&amp;#10;# - if using Mac (does NOT work with SUBIC outside scanner Windows computer)&amp;#10;#allowed_input_chars.extend(['semicolon', 'apostrophe', 'bracketleft'])&amp;#10;&amp;#10;# space, periods, commas, backspaces (to delete previous input)&amp;#10;# should also be allowed (shift characters however are listened to separately, see&amp;#10;# the 'each frame' code snippet)&amp;#10;allowed_input_chars.extend(['backspace', 'space', 'period', 'comma'])&amp;#10;# with the list of keys ready, convert it into a tuple, store as&amp;#10;# a constant, and delete the list&amp;#10;ALLOWED_INPUT_CHARS = tuple(allowed_input_chars)&amp;#10;del allowed_input_chars&amp;#10;&amp;#10;# create tuple of alphabetic, including 'ä', 'å', 'ö',&amp;#10;# characters&amp;#10;ALPHA_CHARS = tuple([chr(x) for x in range(97, 123)] + ['ä', 'å', 'ö'])&amp;#10;&amp;#10;# define a maximum length of input string&amp;#10;INPUT_MAX_LEN = 120&amp;#10;&amp;#10;# Windows function (works with SUBIC outside scanner Windows computer)&amp;#10;def keyname_to_char(key_name):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Converts a PsychoPy keyboard .getKey key name to its corresponding&amp;#10;    character string. (only includes key names relevant for this experiment)&amp;#10;    &quot;&quot;&quot;&amp;#10;    out_char = ''&amp;#10;    if key_name == 'space':&amp;#10;        out_char = ' '&amp;#10;    elif key_name == 'period':&amp;#10;        out_char = '.'&amp;#10;    elif key_name == 'comma':&amp;#10;        out_char = ','&amp;#10;    elif key_name == 'apostrophe':&amp;#10;        out_char = 'ö'&amp;#10;    elif key_name == 'pound':&amp;#10;        out_char = 'ä'&amp;#10;    elif key_name == 'bracketright':&amp;#10;        out_char = 'å'&amp;#10;    else:&amp;#10;        out_char  = key_name&amp;#10;    return out_char&amp;#10;&amp;#10;# mac function (DOES NOT work with SUBIC outside scanner Windows computer)&amp;#10;#def keyname_to_char(key_name):&amp;#10;#    &quot;&quot;&quot;&amp;#10;#    Converts a PsychoPy keyboard .getKey key name to its corresponding&amp;#10;#    character string. (only includes key names relevant for this experiment)&amp;#10;#    &quot;&quot;&quot;&amp;#10;#    out_char = ''&amp;#10;#    if key_name == 'space':&amp;#10;#        out_char = ' '&amp;#10;#    elif key_name == 'period':&amp;#10;#        out_char = '.'&amp;#10;#    elif key_name == 'comma':&amp;#10;#        out_char = ','&amp;#10;#    elif key_name == 'semicolon':&amp;#10;#        out_char = 'ö'&amp;#10;#    elif key_name == 'apostrophe':&amp;#10;#        out_char = 'ä'&amp;#10;#    elif key_name == 'bracketleft':&amp;#10;#        out_char = 'å'&amp;#10;#    else:&amp;#10;#        out_char  = key_name&amp;#10;#    return out_char&amp;#10;&amp;#10;### END TEXT INPUT SETUP ###" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import {OrderedDict} from 'collections';&amp;#10;import * as pyglet from 'pyglet';&amp;#10;var ALLOWED_INPUT_CHARS, ALPHA_CHARS, INPUT_MAX_LEN, allowed_input_chars, prev_frame_buttons, this_frame_buttons;&amp;#10;this_frame_buttons = [];&amp;#10;prev_frame_buttons = [];&amp;#10;allowed_input_chars = function () {&amp;#10;    var _pj_a = [], _pj_b = range(97, 123);&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var x = _pj_b[_pj_c];&amp;#10;        _pj_a.push(chr(x));&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;allowed_input_chars.extend(function () {&amp;#10;    var _pj_a = [], _pj_b = range(10);&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var x = _pj_b[_pj_c];&amp;#10;        _pj_a.push(x.toString());&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this));&amp;#10;allowed_input_chars.extend([&quot;pound&quot;, &quot;apostrophe&quot;, &quot;bracketright&quot;]);&amp;#10;allowed_input_chars.extend([&quot;backspace&quot;, &quot;space&quot;, &quot;period&quot;, &quot;comma&quot;]);&amp;#10;ALLOWED_INPUT_CHARS = tuple(allowed_input_chars);&amp;#10;delete allowed_input_chars;&amp;#10;ALPHA_CHARS = tuple((function () {&amp;#10;    var _pj_a = [], _pj_b = range(97, 123);&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var x = _pj_b[_pj_c];&amp;#10;        _pj_a.push(chr(x));&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this) + [&quot;\u00e4&quot;, &quot;\u00e5&quot;, &quot;\u00f6&quot;]));&amp;#10;INPUT_MAX_LEN = 120;&amp;#10;function keyname_to_char(key_name) {&amp;#10;    /*&amp;#10;    Converts a PsychoPy keyboard .getKey key name to its corresponding&amp;#10;    character string. (only includes key names relevant for this experiment)&amp;#10;    */&amp;#10;    var out_char;&amp;#10;    out_char = &quot;&quot;;&amp;#10;    if ((key_name === &quot;space&quot;)) {&amp;#10;        out_char = &quot; &quot;;&amp;#10;    } else {&amp;#10;        if ((key_name === &quot;period&quot;)) {&amp;#10;            out_char = &quot;.&quot;;&amp;#10;        } else {&amp;#10;            if ((key_name === &quot;comma&quot;)) {&amp;#10;                out_char = &quot;,&quot;;&amp;#10;            } else {&amp;#10;                if ((key_name === &quot;apostrophe&quot;)) {&amp;#10;                    out_char = &quot;\u00f6&quot;;&amp;#10;                } else {&amp;#10;                    if ((key_name === &quot;pound&quot;)) {&amp;#10;                        out_char = &quot;\u00e4&quot;;&amp;#10;                    } else {&amp;#10;                        if ((key_name === &quot;bracketright&quot;)) {&amp;#10;                            out_char = &quot;\u00e5&quot;;&amp;#10;                        } else {&amp;#10;                            out_char = key_name;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    return out_char;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# experience&lt;key&gt;-(textstim, responsebox)&lt;value&gt; dictionary&amp;#10;experience_resp_dict = OrderedDict()&amp;#10;&amp;#10;# fill up the dictionary with appropriate mappings&amp;#10;for i, experience in enumerate(Q_EXPERIENCES_DICT.keys()):&amp;#10;    resp_text_stim = visual.TextStim(&amp;#10;        win=win, &amp;#10;        name=f'experience_{experience}',&amp;#10;        text=Q_EXPERIENCES_DICT[experience],&amp;#10;        font='Arial',&amp;#10;        units='deg', &amp;#10;        pos=(0, EXPERIENCE_RESP_Y - i * EXPERIENCE_RESP_MARGIN), &amp;#10;        height=EXPERIENCE_RESP_TXT_SIZE, &amp;#10;        wrapWidth=TXT_WRAP_WIDTH*1.2, &amp;#10;        ori=0, &amp;#10;        color=TXT_NEUTRAL_COL, &amp;#10;        colorSpace='rgb', &amp;#10;        opacity=RESP_NEUTRAL_OPACITY, &amp;#10;        languageStyle='LTR',&amp;#10;        depth=-5.0&amp;#10;    )&amp;#10;    resp_box_stim = visual.Rect(&amp;#10;        win=win, &amp;#10;        name='rectangle_color_confirm',&amp;#10;        units='deg', &amp;#10;        width=RESP_BOX_SIDE_LEN, &amp;#10;        height=RESP_BOX_SIDE_LEN,&amp;#10;        ori=0,&amp;#10;        pos=(EXPERIENCE_RESP_BOX_X_OFFSET, EXPERIENCE_RESP_Y - i * EXPERIENCE_RESP_MARGIN),&amp;#10;        lineWidth=1, &amp;#10;        lineColor=RESP_BOX_SELECTED_COL, &amp;#10;        lineColorSpace='rgb',&amp;#10;        fillColor=RESP_BOX_NEUTRAL_COL, &amp;#10;        fillColorSpace='rgb',&amp;#10;        opacity=1, &amp;#10;        depth=-2.0, &amp;#10;        interpolate=True&amp;#10;    )&amp;#10;    experience_resp_dict[experience] = (resp_box_stim, resp_text_stim)&amp;#10;&amp;#10;# do keyboard input related setup&amp;#10;key_resp = keyboard.Keyboard()&amp;#10;&amp;#10;# need to directly interact with pyglet in order&amp;#10;# to check for held key presses&amp;#10;pyglet_key=pyglet.window.key&amp;#10;pyglet_keyboard = pyglet_key.KeyStateHandler()&amp;#10;win.winHandle.push_handlers(pyglet_keyboard)&amp;#10;&amp;#10;# form text input stimulus (not using PsychoPy's own 'TextBox2'&amp;#10;# class, since it has multiple issues, most crucial of which is that&amp;#10;# it's hard to control when it should appear or not)&amp;#10;text_experience_input = visual.TextStim(&amp;#10;    win=win, &amp;#10;    name='text_experience_input',&amp;#10;    text='',&amp;#10;    alignText='left',&amp;#10;    font='Arial',&amp;#10;    units='deg', &amp;#10;    pos=(0, EXPERIENCE_INPUT_Y), &amp;#10;    height=EXPERIENCE_RESP_TXT_SIZE*0.8, &amp;#10;    wrapWidth=TXT_WRAP_WIDTH, &amp;#10;    ori=0, &amp;#10;    color=TXT_NEUTRAL_COL, &amp;#10;    colorSpace='rgb', &amp;#10;    opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-3.0&amp;#10;)&amp;#10;&amp;#10;# form a rectangle that will serve as a border for the&amp;#10;# text input stimulus&amp;#10;rect_experience_input = visual.Rect(&amp;#10;    win=win, &amp;#10;    name='rectangle_color_confirm',&amp;#10;    units='deg', &amp;#10;    width=TXT_WRAP_WIDTH*1.05, &amp;#10;    height=EXPERIENCE_RESP_TXT_SIZE*3,&amp;#10;    ori=0,&amp;#10;    pos=(0, EXPERIENCE_INPUT_Y),&amp;#10;    lineWidth=2, &amp;#10;    lineColor=TXT_NEUTRAL_COL, &amp;#10;    lineColorSpace='rgb',&amp;#10;    fillColor=None, &amp;#10;    fillColorSpace='rgb',&amp;#10;    opacity=1, &amp;#10;    depth=-2.0, &amp;#10;    interpolate=True&amp;#10;)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="mouse_experience.setPos(MOUSE_START_POS);&amp;#10;(mouse_experience.status === PsychoJS.Status.STARTED);&amp;#10;win.mouseVisible = true;&amp;#10;textbox_container = [];&amp;#10;textbox_input = &quot;&quot;;&amp;#10;answer_experiences = [];&amp;#10;for (var resp_key, _pj_c = 0, _pj_a = experience_resp_dict, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    resp_key = _pj_a[_pj_c];&amp;#10;    [resp_box, resp_text] = experience_resp_dict[resp_key];&amp;#10;    resp_text.opacity = RESP_NEUTRAL_OPACITY;&amp;#10;    resp_text.font = &quot;Arial&quot;;&amp;#10;    resp_box.fillColor = RESP_BOX_NEUTRAL_COL;&amp;#10;}&amp;#10;text_experience_input.text = &quot;&quot;;&amp;#10;input_chars = [];&amp;#10;show_input = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# move the mouse cursor to the starting position&amp;#10;mouse_experience.setPos(MOUSE_START_POS)&amp;#10;&amp;#10;mouse_experience.status == STARTED&amp;#10;&amp;#10;# show the mouse cursor&amp;#10;win.mouseVisible = True&amp;#10;&amp;#10;# list that contains 'other' response input&amp;#10;# textbox, once it's generated&amp;#10;textbox_container = []&amp;#10;&amp;#10;# variable for storing textbox input&amp;#10;# (in case 'other' is clicked twice, deleting&amp;#10;# the input)&amp;#10;textbox_input = ''&amp;#10;&amp;#10;# list of (in English) colors that have been&amp;#10;# selected by the participant&amp;#10;answer_experiences = []&amp;#10;&amp;#10;# reset font and opacity of response color textstims,&amp;#10;# and response box colors&amp;#10;for resp_key in experience_resp_dict:&amp;#10;    resp_box, resp_text = experience_resp_dict[resp_key]&amp;#10;    resp_text.opacity = RESP_NEUTRAL_OPACITY&amp;#10;    resp_text.font = 'Arial'&amp;#10;    resp_box.fillColor = RESP_BOX_NEUTRAL_COL&amp;#10;&amp;#10;# reset text input box&amp;#10;text_experience_input.text = ''&amp;#10;# list that holds input characters&amp;#10;input_chars = []&amp;#10;show_input = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="this_frame_buttons = mouse_experience.getPressed()&amp;#10;&amp;#10;# at least one button has been clicked, and it's a new click&amp;#10;if sum(this_frame_buttons) &gt; 0 and this_frame_buttons != prev_frame_buttons:&amp;#10;    # check if one of the response alternatives was clicked&amp;#10;    for resp_key in experience_resp_dict:&amp;#10;        resp_box, resp_text = experience_resp_dict[resp_key]&amp;#10;        if resp_text.contains(mouse_experience) or resp_box.contains(mouse_experience):&amp;#10;            # if response is already selected, deselect it&amp;#10;            if resp_key in answer_experiences:&amp;#10;                resp_text.opacity = RESP_NEUTRAL_OPACITY&amp;#10;                resp_text.font = 'Arial'&amp;#10;                answer_experiences.remove(resp_key)&amp;#10;                resp_box.fillColor = RESP_BOX_NEUTRAL_COL&amp;#10;            # if response isn't selected, select it&amp;#10;            else:&amp;#10;                # change the font to indicate that response&amp;#10;                # has been selected&amp;#10;                resp_text.opacity = RESP_SELECTED_OPACITY&amp;#10;                resp_text.font = 'Arial Black'&amp;#10;                answer_experiences.append(resp_key)&amp;#10;                resp_box.fillColor = RESP_BOX_SELECTED_COL&amp;#10;            # if the 'other' response was clicked&amp;#10;            if resp_key == 'other':&amp;#10;                # if the input box isn't being drawn yet, start&amp;#10;                # drawing it. if it already is being drawn, stop&amp;#10;                # drawing it&amp;#10;                show_input = not show_input&amp;#10;    # check if 'confirm' button was clicked&amp;#10;    if rectangle_experience_confirm.contains(mouse_experience):&amp;#10;        continueRoutine = False&amp;#10;        gotValidClick = True&amp;#10;        confirm_click_time = tThisFlip&amp;#10;&amp;#10;# store this frame's buttons for comparison in next frame&amp;#10;prev_frame_buttons = this_frame_buttons&amp;#10;&amp;#10;# draw the response choices&amp;#10;for resp_key in experience_resp_dict:&amp;#10;    for stim in experience_resp_dict[resp_key]:&amp;#10;        stim.draw()&amp;#10;&amp;#10;# if the 'other' response input box is activated, &amp;#10;# check for keyboard input, update&amp;#10;# the input text if relevant, and draw the &amp;#10;# input box&amp;#10;if show_input:&amp;#10;    new_keys = key_resp.getKeys(keyList=ALLOWED_INPUT_CHARS, waitRelease=True)&amp;#10;    if new_keys:&amp;#10;        key_name = new_keys[-1].name&amp;#10;        if key_name == 'backspace':&amp;#10;            # check if there are any already input characters,&amp;#10;            # and if so, remove the last one&amp;#10;            if input_chars:&amp;#10;                input_chars.pop()&amp;#10;        else:&amp;#10;            key_char = keyname_to_char(key_name)&amp;#10;            shift_pressed = pyglet_keyboard[pyglet_key.LSHIFT] or pyglet_keyboard[pyglet_key.RSHIFT]&amp;#10;            if key_char in ALPHA_CHARS and shift_pressed:&amp;#10;                key_char = key_char.upper()&amp;#10;            if len(input_chars) &lt; INPUT_MAX_LEN:&amp;#10;                input_chars.append(key_char)&amp;#10;        text_experience_input.text = ''.join(input_chars)&amp;#10;    text_experience_input.draw()&amp;#10;    rect_experience_input.draw()&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;this_frame_buttons = mouse_experience.getPressed();&amp;#10;if (((sum(this_frame_buttons) &gt; 0) &amp;&amp; (this_frame_buttons !== prev_frame_buttons))) {&amp;#10;    for (var resp_key, _pj_c = 0, _pj_a = experience_resp_dict, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        resp_key = _pj_a[_pj_c];&amp;#10;        [resp_box, resp_text] = experience_resp_dict[resp_key];&amp;#10;        if ((resp_text.contains(mouse_experience) || resp_box.contains(mouse_experience))) {&amp;#10;            if (_pj.in_es6(resp_key, answer_experiences)) {&amp;#10;                resp_text.opacity = RESP_NEUTRAL_OPACITY;&amp;#10;                resp_text.font = &quot;Arial&quot;;&amp;#10;                answer_experiences.remove(resp_key);&amp;#10;                resp_box.fillColor = RESP_BOX_NEUTRAL_COL;&amp;#10;            } else {&amp;#10;                resp_text.opacity = RESP_SELECTED_OPACITY;&amp;#10;                resp_text.font = &quot;Arial Black&quot;;&amp;#10;                answer_experiences.append(resp_key);&amp;#10;                resp_box.fillColor = RESP_BOX_SELECTED_COL;&amp;#10;            }&amp;#10;            if ((resp_key === &quot;other&quot;)) {&amp;#10;                show_input = (! show_input);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    if (rectangle_experience_confirm.contains(mouse_experience)) {&amp;#10;        continueRoutine = false;&amp;#10;        gotValidClick = true;&amp;#10;        confirm_click_time = tThisFlip;&amp;#10;    }&amp;#10;}&amp;#10;prev_frame_buttons = this_frame_buttons;&amp;#10;for (var resp_key, _pj_c = 0, _pj_a = experience_resp_dict, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    resp_key = _pj_a[_pj_c];&amp;#10;    for (var stim, _pj_f = 0, _pj_d = experience_resp_dict[resp_key], _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;        stim = _pj_d[_pj_f];&amp;#10;        stim.draw();&amp;#10;    }&amp;#10;}&amp;#10;if (show_input) {&amp;#10;    new_keys = key_resp.getKeys({&quot;keyList&quot;: ALLOWED_INPUT_CHARS, &quot;waitRelease&quot;: true});&amp;#10;    if (new_keys) {&amp;#10;        key_name = new_keys.slice((- 1))[0].name;&amp;#10;        if ((key_name === &quot;backspace&quot;)) {&amp;#10;            if (input_chars) {&amp;#10;                input_chars.pop();&amp;#10;            }&amp;#10;        } else {&amp;#10;            key_char = keyname_to_char(key_name);&amp;#10;            shift_pressed = (pyglet_keyboard[pyglet_key.LSHIFT] || pyglet_keyboard[pyglet_key.RSHIFT]);&amp;#10;            if ((_pj.in_es6(key_char, ALPHA_CHARS) &amp;&amp; shift_pressed)) {&amp;#10;                key_char = key_char.upper();&amp;#10;            }&amp;#10;            if ((input_chars.length &lt; INPUT_MAX_LEN)) {&amp;#10;                input_chars.append(key_char);&amp;#10;            }&amp;#10;        }&amp;#10;        text_experience_input.text = &quot;&quot;.join(input_chars);&amp;#10;    }&amp;#10;    text_experience_input.draw();&amp;#10;    rect_experience_input.draw();&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="trials.addData(&quot;experience_confirm_click_time&quot;, confirm_click_time);&amp;#10;trials.addData(&quot;reported_experiences&quot;, answer_experiences);&amp;#10;trials.addData(&quot;reported_experiences_other&quot;, text_experience_input.text);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="trials.addData('experience_confirm_click_time', confirm_click_time)&amp;#10;trials.addData('reported_experiences', answer_experiences)&amp;#10;# if the participant did click the 'other' choice, store their input&amp;#10;# and remove focus from the input box&amp;#10;trials.addData('reported_experiences_other', text_experience_input.text)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_experience" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="mouse_experience">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_experience" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <PolygonComponent name="rectangle_experience_confirm">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$CONFIRM_BOX_FILL_COL" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$CONFIRM_BOX_BORDER_COL" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="2" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="rectangle_experience_confirm" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CONFIRM_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(CONFIRM_BTN_WIDTH, CONFIRM_BTN_HEIGHT)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="text_experience_confirm">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="CONFIRM_TXT_HEIGHT" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_experience_confirm" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CONFIRM_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$CONFIRM_TXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_q_experience">
        <Param val="$TXT_NEUTRAL_COL" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="$TXT_SIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_q_experience" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, Q_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$Q_EXPERIENCES_TXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="$TXT_WRAP_WIDTH" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="instructions">
      <PolygonComponent name="rectangle_instructions_start">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$CONFIRM_BOX_FILL_COL" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$CONFIRM_BOX_BORDER_COL" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="2" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="rectangle_instructions_start" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CONFIRM_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(CONFIRM_BTN_WIDTH*1.5, CONFIRM_BTN_HEIGHT)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="8.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <TextComponent name="text_instructions_start">
        <Param val="black" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="CONFIRM_TXT_HEIGHT" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_start" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, CONFIRM_Y)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="8.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$INTRO_START_TXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse_instructions">
        <Param val="rectangle_instructions_start" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse_instructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="never" valType="str" updates="None" name="saveMouseState"/>
        <Param val="" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="8.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <TextComponent name="text_instructions_1">
        <Param val="$TXT_NEUTRAL_COL" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="$INSTRUCTIONS_TXT_SIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_1" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, INSTRUCTIONS_TXT_Y1)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$INSTRUCTIONS_TXT_1" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="$TXT_WRAP_WIDTH" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_instructions_2">
        <Param val="$TXT_NEUTRAL_COL" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="$INSTRUCTIONS_TXT_SIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_2" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, INSTRUCTIONS_TXT_Y2)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$INSTRUCTIONS_TXT_2" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="$TXT_WRAP_WIDTH" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_instructions_3">
        <Param val="$TXT_NEUTRAL_COL" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="$INSTRUCTIONS_TXT_SIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_3" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, INSTRUCTIONS_TXT_Y3)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="8.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$INSTRUCTIONS_TXT_3" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="$TXT_WRAP_WIDTH" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="end">
      <TextComponent name="text_end">
        <Param val="$TXT_NEUTRAL_COL" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="$TXT_SIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_end" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$END_TXT" valType="extendedStr" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="experiment_setup"/>
    <Routine name="instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="3" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial_show_pattern"/>
    <Routine name="trial_q_experience"/>
    <Routine name="trial_q_color"/>
    <Routine name="trial_q_discomfort"/>
    <LoopTerminator name="trials"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
